var numberConstants = {
    getDefinedNumberFormats: function(currency) {
        return ({
            currency: {
                style: 'currency',
                currency: currency
            },
            percent: {
                style: 'percent',
                maximumFractionDigits: 2
            },
            decimal: {
                style: 'decimal',
                maximumFractionDigits: 2
            }
        });
    }
};
var NumberFormatter = /** @class */ (function() {
    function NumberFormatter(locale, currency) {
        this.locale = locale;
        this.currency = currency;
    }
    // simple implementation from old implementation
    NumberFormatter.prototype.getCustomNumber = function(number, options) {
        try {
            return new Intl.NumberFormat(this.locale, options).format(number);
        } catch (error) {
            return number;
        }
    };
    return NumberFormatter;
}());
export {
    NumberFormatter
};
export default function localizeNumberString(number, options) {
    if (Number.isNaN(number)) {
        throw new TypeError("The argument 'number' must be of type number");
    }
    var definedNumberFormats = numberConstants.getDefinedNumberFormats('USD');
    var formatOptions;
    if (typeof options === 'string') {
        formatOptions = definedNumberFormats[options];
    } else if (typeof options === 'object') {
        formatOptions = options;
    } else if (options === undefined) {
        formatOptions = definedNumberFormats.decimal; // default to decimal
    } else {
        throw new TypeError("'options' must be of type string or object based on Intl.NumberFormat");
    }
    return new NumberFormatter('en-US', 'USD').getCustomNumber(number, formatOptions); // TODO: don't hard set locale
}