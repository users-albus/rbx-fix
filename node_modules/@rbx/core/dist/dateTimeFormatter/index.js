var fullDateFormat = [{
        year: 'numeric',
        month: 'short',
        day: 'numeric'
    },
    {
        hour: 'numeric',
        minute: 'numeric',
        hour12: true
    }
];
var dateTimeConstants = {
    filteredOutPartType: 'literal',
    defaultDelimiter: ' | ',
    partOneDefault: 'month',
    partTwoDefault: 'day',
    partThreeDefault: 'year'
};
var DateTimeFormatter = /** @class */ (function() {
    function DateTimeFormatter(locale) {
        this.locale = locale;
    }
    DateTimeFormatter.prototype.getShortDate = function(date) {
        return this.getCustomDateTime(date);
    };
    DateTimeFormatter.prototype.getFullDate = function(date, delimiter) {
        if (delimiter === void 0) {
            delimiter = dateTimeConstants.defaultDelimiter;
        }
        var firstHalfOfFullDate = this.getCustomDateTime(date, fullDateFormat[0]);
        var secondHalfOfFullDate = this.getCustomDateTime(date, fullDateFormat[1]);
        return firstHalfOfFullDate + delimiter + secondHalfOfFullDate;
    };
    DateTimeFormatter.prototype.getOrderedDateParts = function(options) {
        var formatter = new Intl.DateTimeFormat(this.locale, options);
        var parts;
        // As of 03/27/2019 Internet Explorer doesn't support formatToParts so we use a default value
        // If you want the polyfill (additional code bloat we decided against using), here it is:
        // https://github.com/tc39/proposal-intl-formatToParts
        try {
            parts = formatter.formatToParts(new Date());
        } catch (error) {
            parts = [{
                    type: dateTimeConstants.partOneDefault
                },
                {
                    type: dateTimeConstants.partTwoDefault
                },
                {
                    type: dateTimeConstants.partThreeDefault
                }
            ];
        }
        return parts.filter(function(part) {
            return part.type !== dateTimeConstants.filteredOutPartType;
        });
    };
    DateTimeFormatter.prototype.getCustomDateTime = function(date, options) {
        if (date === void 0) {
            date = new Date();
        }
        // date may be a utc value or date string in which case we need to format it
        // as new Date object
        var newDate = date;
        if (typeof date === 'string' || typeof date === 'number') {
            newDate = new Date(date);
        }
        var formatter = new Intl.DateTimeFormat(this.locale, options);
        try {
            return formatter.format(newDate); // this will i18n'ize the date
        } catch (error) {
            return '';
        }
    };
    return DateTimeFormatter;
}());
export {
    DateTimeFormatter
};
var getDateTimeFormatter = function(locale) {
    return new DateTimeFormatter(locale);
};
export default getDateTimeFormatter;