var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import Error from './enums/Error';
import Status from './enums/Status';
import PaginationCache from './PaginationCache';
var CursorPager = /** @class */ (function() {
    function CursorPager(pageSize, // this should be the number of items each page should have (how many items should be returned from a load page promise)
        loadPageSize, // how many results should be loaded at once to fill these pages (how many items should be requested by getItems)
        getItems, // promise function(pagingParameters), function that returns promise for getting items, promise should resolve in pageResponse format
        defaultPagingParameters) {
        this.pageSize = pageSize;
        this.loadPageSize = loadPageSize;
        this.getItems = getItems;
        this.cache = new PaginationCache(pageSize);
        this.firstPagePagingParameters = defaultPagingParameters;
        this.pagingParameters = defaultPagingParameters;
        this.indexCursors = {};
        this.initId = 0;
        this.status = Status.Initialized;
        this.currentPageNumber = 1;
        this.setNextPageCursor('');
    }
    // the current status of what the pager is doing (see: Status)
    CursorPager.prototype.getStatus = function() {
        return this.status;
    };
    // whether or not the pager is currently loading waiting to load something
    CursorPager.prototype.isBusy = function() {
        return this.status !== Status.Idle;
    };
    // gets the current page number
    CursorPager.prototype.getCurrentPageNumber = function() {
        return this.currentPageNumber;
    };
    // gets the paging parameters set by setPagingParametersAndLoadFirstPage
    CursorPager.prototype.getPagingParameters = function() {
        return __assign({}, this.firstPagePagingParameters);
    };
    // whether or not the pager has reached the end of the pages of items (will return false if there is no next page to load)
    CursorPager.prototype.hasNextPage = function() {
        var _a;
        var cacheKey = this.getCacheKey();
        if (this.cache.getLength(cacheKey) > this.currentPageNumber * this.pageSize) {
            // If we have enough in the cache we're good to load the next page
            return true;
        }
        // The cursor for the next page must be defined as a string before we can load the next page with it.
        return typeof((_a = this.pagingParameters) === null || _a === void 0 ? void 0 : _a.cursor) === 'string';
    };
    // whether or not the pager can load the next page of items (will return false if it's busy or there is no next page)
    CursorPager.prototype.canLoadNextPage = function() {
        return this.hasNextPage() && !this.isBusy();
    };
    // whether or not the pager can load the previous page of items (will be false if it's busy or there is no previous page)
    CursorPager.prototype.canLoadPreviousPage = function() {
        return !this.isBusy() && this.currentPageNumber > 1;
    };
    // whether or not the pager can load the first page of items (will return false if it's busy)
    CursorPager.prototype.canLoadFirstPage = function() {
        return !this.isBusy();
    };
    // whether or not the pager can load the first page of items (will return false if it's busy)
    CursorPager.prototype.canReloadCurrentPage = function() {
        return !this.isBusy();
    };
    // sets new paging parameters then returns loadFirstPage
    CursorPager.prototype.setPagingParametersAndLoadFirstPage = function(newPagingParameters) {
        this.status = Status.Loading;
        var cacheKey = this.getCacheKey();
        this.cache.clear(cacheKey);
        if (typeof newPagingParameters.pageSize !== 'undefined') {
            this.cache.setPageSize(newPagingParameters.pageSize);
            this.pageSize = newPagingParameters.pageSize;
        }
        if (typeof newPagingParameters.loadPageSize !== 'undefined') {
            this.loadPageSize = newPagingParameters.loadPageSize;
        }
        this.currentPageNumber = 1;
        this.indexCursors = {};
        this.firstPagePagingParameters = __assign({}, newPagingParameters);
        this.pagingParameters = __assign({}, newPagingParameters);
        this.setNextPageCursor('');
        return this.loadPage(1);
    };
    // clears the cache, then loads the page of items for the current page number
    CursorPager.prototype.reloadCurrentPage = function() {
        if (this.currentPageNumber === 1) {
            return this.loadFirstPage();
        }
        var cacheKey = this.getCacheKey();
        var highestIndex = 0;
        var indexCursors = this.indexCursors;
        var currentIndex = this.currentPageNumber * (this.pageSize - 1);
        var indexes = Object.keys(indexCursors);
        indexes.forEach(function(index) {
            var numIndex = Number(index);
            if (numIndex > currentIndex) {
                // Delete all cursors higher than the index we're at.
                delete indexCursors[numIndex];
            } else {
                highestIndex = Math.max(numIndex, highestIndex);
            }
        });
        var invalidationIndex = Math.floor(currentIndex / this.loadPageSize) * this.loadPageSize;
        this.cache.removeAfterIndex(cacheKey, invalidationIndex);
        this.setNextPageCursor(indexCursors[highestIndex] || '');
        return this.loadPage(this.currentPageNumber);
    };
    // similar to reloadCurrentPage but does not clear the cache first
    CursorPager.prototype.getCurrentPage = function() {
        return this.loadPage(this.currentPageNumber);
    };
    // loads the next page of items
    CursorPager.prototype.loadNextPage = function() {
        return this.loadPage(this.currentPageNumber + 1);
    };
    // loads the previous page of items
    CursorPager.prototype.loadPreviousPage = function() {
        return this.loadPage(this.currentPageNumber - 1);
    };
    // clears the cache, then loads the first page of items
    CursorPager.prototype.loadFirstPage = function() {
        return this.setPagingParametersAndLoadFirstPage(this.firstPagePagingParameters);
    };
    CursorPager.prototype.loadPage = function(pageNumber, id) {
        var _this = this;
        if (typeof id === 'undefined') {
            this.initId += 1;
        }
        var actualId = id !== null && id !== void 0 ? id : this.initId;
        return new Promise(function(originalResolve, originalReject) {
            var reject = function(e) {
                if (_this.initId === actualId) {
                    _this.status = Status.Idle;
                    originalReject(e);
                } else {
                    originalReject(Error.PagingParametersChanged);
                }
            };
            var resolve = function(data) {
                if (_this.initId === actualId) {
                    _this.status = Status.Idle;
                    _this.currentPageNumber = pageNumber;
                    originalResolve(data);
                } else {
                    originalReject(Error.PagingParametersChanged);
                }
            };
            if (pageNumber < 1) {
                reject(Error.InvalidPageNumber);
                return;
            }
            var cacheKey = _this.getCacheKey();
            var items = _this.cache.getPage(cacheKey, pageNumber);
            if (items.length === _this.pageSize) {
                resolve(items);
                return;
            }
            if (typeof _this.pagingParameters.cursor !== 'string') {
                if (items.length <= 0 && pageNumber > 1) {
                    // There's no next page to load and no items in the cache for this page.
                    reject(Error.InvalidPageNumber);
                    return;
                }
                resolve(items);
                return;
            }
            _this.status = Status.Loading;
            _this.loadNextPageIntoCache(cacheKey, actualId)
                .then(function() {
                    // Call loadPage and we will read from the cache.
                    // This will also invoke another call to load more items until either
                    // the cache has a sufficient number of items or we run out of next pages.
                    _this.loadPage(pageNumber, actualId).then(resolve).catch(reject);
                })
                .catch(reject);
        });
    };
    // whether or not the pager can remove an item (will return false if it's busy)
    CursorPager.prototype.canRemoveItem = function() {
        return !this.isBusy();
    };
    CursorPager.prototype.removeItemAtIndex = function(index) {
        var cacheKey = this.getCacheKey();
        this.cache.removeAtIndex(cacheKey, this.currentPageNumber, index);
        if (this.canReloadCurrentPage()) {
            return this.getCurrentPage();
        }
        // Otherwise, load previous page
        return this.loadPage(this.currentPageNumber - 1);
    };
    CursorPager.prototype.getCacheKey = function() {
        return JSON.stringify(this.firstPagePagingParameters);
    };
    CursorPager.prototype.setNextPageCursor = function(nextPageCursor) {
        this.pagingParameters = __assign(__assign({}, this.pagingParameters), {
            cursor: nextPageCursor
        });
    };
    CursorPager.prototype.loadNextPageIntoCache = function(cacheKey, id) {
        var _this = this;
        return new Promise(function(resolve, reject) {
            _this.indexCursors[_this.cache.getLength(cacheKey)] = _this.pagingParameters.cursor;
            // The page number according to getItems (based on loadPageSize, not pageSize)
            var loadPageNumber = Object.keys(_this.indexCursors).length;
            _this.getItems(__assign(__assign({}, _this.pagingParameters), {
                    count: _this.loadPageSize,
                    pageNumber: loadPageNumber
                }))
                .then(function(result) {
                    if (id === _this.initId) {
                        _this.setNextPageCursor(result.nextPageCursor);
                        _this.cache.append(cacheKey, result.items);
                        resolve();
                    } else {
                        reject(Error.PagingParametersChanged);
                    }
                })
                .catch(function() {
                    // Currently swallowing error since we don't know the type really
                    if (id === _this.initId) {
                        reject(Error.GetItemsFailure);
                    } else {
                        reject(Error.PagingParametersChanged);
                    }
                });
        });
    };
    return CursorPager;
}());
export default CursorPager;