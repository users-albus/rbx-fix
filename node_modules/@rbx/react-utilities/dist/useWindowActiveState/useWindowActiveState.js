import {
    useState,
    useEffect,
    useCallback
} from 'react';
import {
    activeEvents,
    inactiveEvents
} from './constants';
var useWindowActiveState = function() {
    var _a = useState(false),
        isActive = _a[0],
        setIsActive = _a[1];
    var handleActiveChange = useCallback(function() {
        setIsActive(true);
    }, []);
    var handleInActiveChange = useCallback(function() {
        setIsActive(false);
    }, []);
    useEffect(function() {
        activeEvents.forEach(function(event) {
            window.addEventListener(event, handleActiveChange);
        });
        inactiveEvents.forEach(function(event) {
            window.addEventListener(event, handleInActiveChange);
        });
        return function() {
            activeEvents.forEach(function(event) {
                window.removeEventListener(event, handleActiveChange);
            });
            inactiveEvents.forEach(function(event) {
                window.removeEventListener(event, handleInActiveChange);
            });
        };
    }, [handleActiveChange, handleInActiveChange]);
    return isActive;
};
export default useWindowActiveState;