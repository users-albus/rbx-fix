import {
    useEffect,
    useRef
} from 'react';
/**
 * reference from https://usehooks-typescript.com/react-hook/use-interval
 * @param callback
 * @param delay
 */
var useInterval = function(callback, delay) {
    var savedCallback = useRef(callback);
    // Remember the latest callback if it changes.
    useEffect(function() {
        savedCallback.current = callback;
    }, [callback]);
    // Set up the interval.
    useEffect(function() {
        // Don't schedule if no delay is specified.
        if (delay === null) {
            return;
        }
        var interval = setInterval(function() {
            return savedCallback.current();
        }, delay);
        // eslint-disable-next-line consistent-return
        return function() {
            clearInterval(interval);
        };
    }, [delay]);
};
export default useInterval;